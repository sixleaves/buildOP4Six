name: build-netcore-n60
on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/sixleaves/buildOP4Six/releases/download
  REPO_IB: N99-latest
  IB_NAME: immortalwrt-imagebuilder-mediatek-mt7986.Linux-x86_64
  DIY_FILES: arm64/21.02/files
  FIRMWARE_NAME: N100
  ARCH: arm64
  TZ: Asia/Shanghai


jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
      - name: 1.下载config配置
        uses: actions/checkout@main

      - name: 2.安装依赖
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt install build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3
          sudo apt install -y xz-utils

      - name: 5.初始化仓库
        run: |
          df -hT $PWD
          echo "Using IB: $REPO_IB"
          wget $REPO_URL/$REPO_IB/${{ env.IB_NAME }}.tar.xz -O ${{ env.IB_NAME }}.tar.xz
          tar -xJvf ${{ env.IB_NAME }}.tar.xz

      - name: 6.下载singbox最新版本
        run: |
          # 获取 sing-box 最新稳定版本的下载URL（通过重定向）
          REDIRECT_URL=$(curl -s -I -L -o /dev/null -w '%{url_effective}' "https://github.com/SagerNet/sing-box/releases/latest")
          LATEST_VERSION=$(echo "$REDIRECT_URL" | grep -o '[^/]*$' | sed 's/^v//')
          if [ -z "$LATEST_VERSION" ]; then
            echo "错误: 无法获取 sing-box 最新版本号"
          fi
          echo "检测到 sing-box 最新版本: $LATEST_VERSION"
          # 根据架构选择下载文件
          DOWNLOAD_FILE="sing-box-${LATEST_VERSION}-linux-${ARCH}.tar.gz"
          DOWNLOAD_URL="https://github.com/SagerNet/sing-box/releases/download/v${LATEST_VERSION}/${DOWNLOAD_FILE}"
          echo "正在下载 $DOWNLOAD_FILE ..."
          wget -q "$DOWNLOAD_URL"
          if [ $? -ne 0 ]; then
            echo "错误: 下载 $DOWNLOAD_FILE 失败"
            exit 1
          fi
          mkdir -p sb
          echo "正在解压 $DOWNLOAD_FILE ..."
          tar -xzf "$DOWNLOAD_FILE" -C sb
          echo "正在复制 sing-box 到 $SCRIPTS_PATH ..."
          cp sb/sing-box-*/sing-box ${{ env.DIY_FILES }}/usr/bin/
          if [ $? -ne 0 ]; then
            echo "错误: 复制 sing-box 到 $SCRIPTS_PATH 失败"
          fi
          # 设置可执行权限
          chmod +x ${{ env.DIY_FILES }}/usr/bin/sing-box
          echo "操作完成，sing-box 已成功复制到 ${{ env.DIY_FILES }}/usr/bin/sing-box"

      - name: 7.开始构建
        run: |
          mv ${{ env.DIY_FILES }} ${{ env.IB_NAME }}/
          echo "验证配置文件"
          tree ${{ env.IB_NAME }}/files || true
          cd ${{ env.IB_NAME }}
          make image PROFILE="netcore_n60" FILES="files" PACKAGES="\
          kmod-nls-base kmod-nls-cp437 kmod-nls-iso8859-1 kmod-nls-utf8 kmod-fs-vfat blockd kmod-crypto-user \
          kmod-nft-core kmod-nft-fib kmod-nft-nat kmod-nft-offload iptables-mod-tproxy \
          kmod-crypto-cbc kmod-crypto-ccm kmod-crypto-cmac kmod-crypto-des kmod-crypto-gcm kmod-crypto-sha512 kmod-crypto-md5 kmod-crypto-md4 kmod-cryptodev \
          kmod-ata-core kmod-leds-gpio kmod-leds-ws2812b kmod-lib-crc32c kmod-ebtables-ipv4 kmod-ebtables-ipv6 kmod-ipt-offload \
          kmod-ipt-ipset kmod-ipt-raw6 kmod-inet-diag dnsmasq-full mtd procd uci logd resolveip libatomic libstdcpp \
          kmod-nf-nathelper kmod-nf-nathelper-extra kmod-conninfra \
          kmod-mt_wifi kmod-warp wifi-dats switch regs mtwifi-cfg mtkhqos_util mtk-smp mii_mgr wireless-tools luci-app-mtwifi-cfg luci-app-eqos-mtk \
          luci-theme-argon luci-app-turboacc-mtk \
          ca-certificates libopenssl openssl-util \
          tcpdump htop curl rsync zram-swap \
          ipset iw \
          -zoneinfo-core -uboot-envtools -zoneinfo-asia"
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 8.删除多余版本
        uses: actions/github-script@v6
        with:
          script: |
            const pattern = /^N100-/i;  // 匹配以 immortalwrt-2 开头的名称
            const keep = 0;
  
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
  
            const targets = releases
              .filter(release => pattern.test(release.name))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(keep);
  
            for (const release of targets) {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
              });
              console.log(`Deleted IB release: ${release.tag_name}`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 9.上传bin目录
        uses: actions/upload-artifact@master
        with:
          name: arm64-n100-bin
          path: ${{ env.IB_NAME }}/bin/targets/*/*/*

      - name: 10.发布N100
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.FIRMWARE_NAME }}-${{ env.FILE_DATE }}"
          artifacts: "${{ env.IB_NAME }}/bin/targets/*/*/*"
          body: |
            N100