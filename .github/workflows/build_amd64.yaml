name: BuildAmd64
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 16 * *'
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt.git
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: .config_amd64
  REPO_NAME: immortalwrt
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  IS_BUILD_PROXY: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1.下载config配置
        uses: actions/checkout@master

      - name: 2.安装依赖
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack
          sudo apt install -y antlr3
          sudo apt install -y asciidoc
          sudo apt install -y autoconf
          sudo apt install -y automake
          sudo apt install -y autopoint
          sudo apt install -y binutils
          sudo apt install -y bison
          sudo apt install -y build-essential
          sudo apt install -y bzip2
          sudo apt install -y ccache
          sudo apt install -y clang
          sudo apt install -y cmake
          sudo apt install -y cpio
          sudo apt install -y curl
          sudo apt install -y device-tree-compiler
          sudo apt install -y ecj
          sudo apt install -y fastjar
          sudo apt install -y flex
          sudo apt install -y gawk
          sudo apt install -y gettext
          sudo apt install -y gcc-multilib
          sudo apt install -y g++-multilib
          sudo apt install -y git
          sudo apt install -y gnutls-dev
          sudo apt install -y gperf
          sudo apt install -y haveged
          sudo apt install -y help2man
          sudo apt install -y intltool
          sudo apt install -y lib32gcc-s1
          sudo apt install -y libc6-dev-i386
          sudo apt install -y libelf-dev
          sudo apt install -y libglib2.0-dev
          sudo apt install -y libgmp3-dev
          sudo apt install -y libltdl-dev
          sudo apt install -y libmpc-dev
          sudo apt install -y libmpfr-dev
          sudo apt install -y libncurses-dev
          sudo apt install -y libpython3-dev
          sudo apt install -y libreadline-dev
          sudo apt install -y libssl-dev
          sudo apt install -y libtool
          sudo apt install -y libyaml-dev
          sudo apt install -y libz-dev
          sudo apt install -y lld
          sudo apt install -y llvm
          sudo apt install -y lrzsz
          sudo apt install -y mkisofs
          sudo apt install -y msmtp
          sudo apt install -y nano
          sudo apt install -y ninja-build
          sudo apt install -y p7zip
          sudo apt install -y p7zip-full
          sudo apt install -y patch
          sudo apt install -y pkgconf
          sudo apt install -y python3
          sudo apt install -y python3-pip
          sudo apt install -y python3-ply
          sudo apt install -y python3-docutils
          sudo apt install -y python3-pyelftools
          sudo apt install -y qemu-utils
          sudo apt install -y re2c
          sudo apt install -y rsync
          sudo apt install -y scons
          sudo apt install -y squashfs-tools
          sudo apt install -y subversion
          sudo apt install -y swig
          sudo apt install -y texinfo
          sudo apt install -y uglifyjs
          sudo apt install -y upx-ucl
          sudo apt install -y unzip
          sudo apt install -y vim
          sudo apt install -y wget
          sudo apt install -y xmlto
          sudo apt install -y xxd
          sudo apt install -y zlib1g-dev
          sudo apt install -y zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
          echo "=========gcc --version========="
          gcc --version

      - name: 3.Initing...
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone -b $REPO_BRANCH --single-branch --filter=blob:none $REPO_URL 
          ln -sf /workdir/$REPO_NAME $GITHUB_WORKSPACE/$REPO_NAME
          cd $REPO_NAME
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 5.自定义固件
        run: |
          cd $GITHUB_WORKSPACE/mycode
          sudo chmod 777 patch_mycode.sh
          ./patch_mycode.sh $GITHUB_WORKSPACE/$REPO_NAME $GITHUB_WORKSPACE/mycode amd64

      - name: 6.加载配置文件
        run: |
          ls -l $CONFIG_FILE || echo "Config file not found"
          ls -l $GITHUB_WORKSPACE
          [ -e $CONFIG_FILE ] && cp -f $CONFIG_FILE $GITHUB_WORKSPACE/$REPO_NAME/
          mv $GITHUB_WORKSPACE/$REPO_NAME/$CONFIG_FILE $GITHUB_WORKSPACE/$REPO_NAME/.config

      - name: 7.修改Lan IP
        run: |
          cd $REPO_NAME
          sed -i 's/192.168.1.1/192.168.31.1/g' package/base-files/files/bin/config_generate

      - name: 5.修改默认主题
        run: |
          cd $REPO_NAME
          sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' feeds/luci/collections/luci/Makefile
          if [ ! -d "package/luci-theme-argon" ]; then
            git clone --depth=1 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon
          fi

      - name: 6.下载依赖包
        run: |
          cd $REPO_NAME
          for i in {1..3}; do
            if make download -j$(nproc) V=s; then
              echo "Download successful on attempt $i"
              break
            else
              echo "Download failed on attempt $i, retrying..."
              sleep 60
            fi
          done
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 7.开始编译
        run: |
          cd $REPO_NAME
          echo -e "$(nproc) thread compile"
          make -j$(nproc)
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | sed 's/^_//' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: 9.生成SHA256校验和
        run: |
          cd $REPO_NAME/bin/targets/*/*
          sha256sum *.bin > sha256sums.txt
          cat sha256sums.txt

      - name: 10.上传bin目录
        uses: actions/upload-artifact@master
        with:
          name: amd64_x86
          path: $REPO_NAME/bin

      - name: 11.删除最近的发布和版本
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release
          latest_release=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          # Extract the tag name and release ID
          tag_name=$(echo $latest_release | jq -r .tag_name)
          release_id=$(echo $latest_release | jq -r .id)

          # Delete the release
          curl -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"

          # Delete the tag
          git push --delete origin $tag_name

      - name: 12.发布固件
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.DEVICE_NAME }}--${{ env.FILE_DATE }}"
          artifacts: "$REPO_NAME/bin/targets/*/*/*"
          body: |
            IP: 192.168.31.1 | Password: none
