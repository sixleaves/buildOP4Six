name: Build Redmi AX6000 Firmware
on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  CONFIG_FILE: .config
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  IS_BUILD_PROXY: true
  TZ: Asia/Shanghai
  LAN_IP: 192.168.31.1
  CCACHE_DIR: /tmp/ccache
  CACHE_TIMEOUT: 7 # days

jobs:
  build:
    runs-on: ubuntu-20.04
    permissions:
      contents: write

    steps:
      - name: Checkout Configuration
        uses: actions/checkout@master

      - name: Cache Build Tools
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-

      - name: Install Dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \
            libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev \
            libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
            python3 python3-pip python3-ply python3-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig \
            texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          # 创建工作目录
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone Source Code
        working-directory: /workdir
        run: |
          git clone --depth=1 $REPO_URL
          ln -sf /workdir/immortalwrt-mt798x $GITHUB_WORKSPACE/immortalwrt-mt798x
          cd immortalwrt-mt798x
          
          if [ "$IS_BUILD_PROXY" = "true" ]; then
            echo "Adding kenzok8 package source..."
            sed -i '$a src-git smpackage https://github.com/kenzok8/small-package' feeds.conf.default
            ./scripts/feeds update -a
            # 只保留必要的包
            find feeds/smpackage/ -maxdepth 1 ! -name '.' ! -name 'sing-box*' ! -name 'luci-app-sing-box*' -exec rm -rf {} +
            rm -rf feeds/packages/lang/golang
            git clone https://github.com/kenzok8/golang feeds/packages/lang/golang
          else
            ./scripts/feeds update -a
          fi
          ./scripts/feeds install -a

      - name: Configure Build
        run: |
          cd immortalwrt-mt798x
          [ -e $CONFIG_FILE ] && cp -f $CONFIG_FILE ./
          # 通过环境变量设置 LAN IP
          sed -i "s/192.168.1.1/${LAN_IP}/g" package/base-files/files/bin/config_generate
          # 设置默认主题
          sed -i 's/luci-theme-bootstrap/luci-theme-argon/g' feeds/luci/collections/luci/Makefile
          [ ! -d "package/luci-theme-argon" ] && git clone --depth=1 https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon

#      - name: Download Dependencies
#        run: |
#          cd immortalwrt-mt798x
#          cp -f .config compile_config
#
#          # 使用递增重试间隔
#          for i in {1..3}; do
#            if make download -j$(nproc) V=s; then
#              echo "Download successful on attempt $i"
#              break
#            else
#              echo "Download failed on attempt $i, retrying in $((i * 60)) seconds..."
#              sleep $((i * 60))
#            fi
#          done
#
#          # 清理无效下载
#          find dl -size -1024c -delete

      - name: Compile Firmware
        run: |
          cd immortalwrt-mt798x
          echo "Using $(nproc) threads for compilation"
          make -j$(nproc) || exit 1
          
          # 设置输出变量
          echo "DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' | sed 's/^_//')" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@master
        with:
          name: AX6000_RedMi_${{ env.FILE_DATE }}
          path: |
            immortalwrt-mt798x/bin/targets/**/*.bin
            immortalwrt-mt798x/bin/targets/**/*.ipk
          if-no-files-found: error

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.DEVICE_NAME }}--${{ env.FILE_DATE }}"
          artifacts: "immortalwrt-mt798x/bin/targets/*/*/*"
          bodyFile: "RELEASE_NOTES.md"
          allowUpdates: true
          removeArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Notification
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}'
            const message = `Build ${status}: ${process.env.GITHUB_REPOSITORY}@${process.env.GITHUB_REF}`